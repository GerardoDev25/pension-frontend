// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class RegisterGeneralBalance extends ethereum.Event {
  get params(): RegisterGeneralBalance__Params {
    return new RegisterGeneralBalance__Params(this);
  }
}

export class RegisterGeneralBalance__Params {
  _event: RegisterGeneralBalance;

  constructor(event: RegisterGeneralBalance) {
    this._event = event;
  }

  get _generalBalance(): RegisterGeneralBalance_generalBalanceStruct {
    return changetype<RegisterGeneralBalance_generalBalanceStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class RegisterGeneralBalance_generalBalanceStruct extends ethereum.Tuple {
  get solvent(): BigInt {
    return this[0].toBigInt();
  }

  get totalAmount(): BigInt {
    return this[1].toBigInt();
  }

  get totalToPay(): BigInt {
    return this[2].toBigInt();
  }

  get retairedRecords(): Array<
    RegisterGeneralBalance_generalBalanceRetairedRecordsStruct
  > {
    return this[3].toTupleArray<
      RegisterGeneralBalance_generalBalanceRetairedRecordsStruct
    >();
  }

  get monthlyRecords(): Array<
    RegisterGeneralBalance_generalBalanceMonthlyRecordsStruct
  > {
    return this[4].toTupleArray<
      RegisterGeneralBalance_generalBalanceMonthlyRecordsStruct
    >();
  }
}

export class RegisterGeneralBalance_generalBalanceRetairedRecordsStruct extends ethereum.Tuple {
  get totalAmount(): BigInt {
    return this[0].toBigInt();
  }

  get totalToPay(): BigInt {
    return this[1].toBigInt();
  }

  get retairedQuotes(): Array<
    RegisterGeneralBalance_generalBalanceRetairedRecordsRetairedQuotesStruct
  > {
    return this[2].toTupleArray<
      RegisterGeneralBalance_generalBalanceRetairedRecordsRetairedQuotesStruct
    >();
  }
}

export class RegisterGeneralBalance_generalBalanceRetairedRecordsRetairedQuotesStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get monthlyQuote(): BigInt {
    return this[1].toBigInt();
  }

  get quantityQuotes(): BigInt {
    return this[2].toBigInt();
  }

  get totalPaidQuotes(): BigInt {
    return this[3].toBigInt();
  }

  get totalPensionValue(): BigInt {
    return this[4].toBigInt();
  }
}

export class RegisterGeneralBalance_generalBalanceMonthlyRecordsStruct extends ethereum.Tuple {
  get totalAmount(): BigInt {
    return this[0].toBigInt();
  }

  get monthlyQuotes(): Array<
    RegisterGeneralBalance_generalBalanceMonthlyRecordsMonthlyQuotesStruct
  > {
    return this[1].toTupleArray<
      RegisterGeneralBalance_generalBalanceMonthlyRecordsMonthlyQuotesStruct
    >();
  }
}

export class RegisterGeneralBalance_generalBalanceMonthlyRecordsMonthlyQuotesStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get id(): Bytes {
    return this[1].toBytes();
  }

  get dataPension(): RegisterGeneralBalance_generalBalanceMonthlyRecordsMonthlyQuotesDataPensionStruct {
    return changetype<
      RegisterGeneralBalance_generalBalanceMonthlyRecordsMonthlyQuotesDataPensionStruct
    >(this[2].toTuple());
  }

  get contributionDate(): BigInt {
    return this[3].toBigInt();
  }

  get savingAmount(): BigInt {
    return this[4].toBigInt();
  }

  get solidaryAmount(): BigInt {
    return this[5].toBigInt();
  }

  get totalAmount(): BigInt {
    return this[6].toBigInt();
  }
}

export class RegisterGeneralBalance_generalBalanceMonthlyRecordsMonthlyQuotesDataPensionStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get biologySex(): string {
    return this[1].toString();
  }

  get age(): BigInt {
    return this[2].toBigInt();
  }

  get bornAge(): BigInt {
    return this[3].toBigInt();
  }

  get retirentmentDate(): BigInt {
    return this[4].toBigInt();
  }

  get pensionCreatedTime(): BigInt {
    return this[5].toBigInt();
  }

  get pensionId(): BigInt {
    return this[6].toBigInt();
  }

  get totalSavings(): BigInt {
    return this[7].toBigInt();
  }

  get totalSolidary(): BigInt {
    return this[8].toBigInt();
  }
}

export class RegisterPension extends ethereum.Event {
  get params(): RegisterPension__Params {
    return new RegisterPension__Params(this);
  }
}

export class RegisterPension__Params {
  _event: RegisterPension;

  constructor(event: RegisterPension) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _biologySex(): string {
    return this._event.parameters[1].value.toString();
  }

  get _age(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _bornAge(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _retirentmentDate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _pensionCreatedTime(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get _pensionId(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class RegisterQuote extends ethereum.Event {
  get params(): RegisterQuote__Params {
    return new RegisterQuote__Params(this);
  }
}

export class RegisterQuote__Params {
  _event: RegisterQuote;

  constructor(event: RegisterQuote) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _id(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get _dataPension(): RegisterQuote_dataPensionStruct {
    return changetype<RegisterQuote_dataPensionStruct>(
      this._event.parameters[2].value.toTuple()
    );
  }

  get _contributionDate(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _savingAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _solidaryAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get _totalAmount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class RegisterQuote_dataPensionStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get biologySex(): string {
    return this[1].toString();
  }

  get age(): BigInt {
    return this[2].toBigInt();
  }

  get bornAge(): BigInt {
    return this[3].toBigInt();
  }

  get retirentmentDate(): BigInt {
    return this[4].toBigInt();
  }

  get pensionCreatedTime(): BigInt {
    return this[5].toBigInt();
  }

  get pensionId(): BigInt {
    return this[6].toBigInt();
  }

  get totalSavings(): BigInt {
    return this[7].toBigInt();
  }

  get totalSolidary(): BigInt {
    return this[8].toBigInt();
  }
}

export class RegisterQuoteRetaired extends ethereum.Event {
  get params(): RegisterQuoteRetaired__Params {
    return new RegisterQuoteRetaired__Params(this);
  }
}

export class RegisterQuoteRetaired__Params {
  _event: RegisterQuoteRetaired;

  constructor(event: RegisterQuoteRetaired) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _id(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get _monthlyQuote(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _quantityQuotes(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _totalPaidQuotes(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _totalPensionValue(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Pension__checkUpkeepResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getUpkeepNeeded(): boolean {
    return this.value0;
  }

  getValue1(): Bytes {
    return this.value1;
  }
}

export class Pension extends ethereum.SmartContract {
  static bind(address: Address): Pension {
    return new Pension("Pension", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkUpkeep(param0: Bytes): Pension__checkUpkeepResult {
    let result = super.call("checkUpkeep", "checkUpkeep(bytes):(bool,bytes)", [
      ethereum.Value.fromBytes(param0)
    ]);

    return new Pension__checkUpkeepResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_checkUpkeep(
    param0: Bytes
  ): ethereum.CallResult<Pension__checkUpkeepResult> {
    let result = super.tryCall(
      "checkUpkeep",
      "checkUpkeep(bytes):(bool,bytes)",
      [ethereum.Value.fromBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pension__checkUpkeepResult(value[0].toBoolean(), value[1].toBytes())
    );
  }

  cutoffDate(): BigInt {
    let result = super.call("cutoffDate", "cutoffDate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_cutoffDate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cutoffDate", "cutoffDate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pensionIdCounter(): BigInt {
    let result = super.call(
      "pensionIdCounter",
      "pensionIdCounter():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_pensionIdCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pensionIdCounter",
      "pensionIdCounter():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  retirentmentAge(): BigInt {
    let result = super.call(
      "retirentmentAge",
      "retirentmentAge():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_retirentmentAge(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "retirentmentAge",
      "retirentmentAge():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  verifyIfTheContributorAlreadyMinted(_owner: Address): boolean {
    let result = super.call(
      "verifyIfTheContributorAlreadyMinted",
      "verifyIfTheContributorAlreadyMinted(address):(bool)",
      [ethereum.Value.fromAddress(_owner)]
    );

    return result[0].toBoolean();
  }

  try_verifyIfTheContributorAlreadyMinted(
    _owner: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifyIfTheContributorAlreadyMinted",
      "verifyIfTheContributorAlreadyMinted(address):(bool)",
      [ethereum.Value.fromAddress(_owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class DepositAmountCall extends ethereum.Call {
  get inputs(): DepositAmountCall__Inputs {
    return new DepositAmountCall__Inputs(this);
  }

  get outputs(): DepositAmountCall__Outputs {
    return new DepositAmountCall__Outputs(this);
  }
}

export class DepositAmountCall__Inputs {
  _call: DepositAmountCall;

  constructor(call: DepositAmountCall) {
    this._call = call;
  }

  get _pensionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositAmountCall__Outputs {
  _call: DepositAmountCall;

  constructor(call: DepositAmountCall) {
    this._call = call;
  }
}

export class PerformUpkeepCall extends ethereum.Call {
  get inputs(): PerformUpkeepCall__Inputs {
    return new PerformUpkeepCall__Inputs(this);
  }

  get outputs(): PerformUpkeepCall__Outputs {
    return new PerformUpkeepCall__Outputs(this);
  }
}

export class PerformUpkeepCall__Inputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PerformUpkeepCall__Outputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }
}

export class SafeMintCall extends ethereum.Call {
  get inputs(): SafeMintCall__Inputs {
    return new SafeMintCall__Inputs(this);
  }

  get outputs(): SafeMintCall__Outputs {
    return new SafeMintCall__Outputs(this);
  }
}

export class SafeMintCall__Inputs {
  _call: SafeMintCall;

  constructor(call: SafeMintCall) {
    this._call = call;
  }

  get _biologySex(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _age(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _bornAge(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _firstQuote(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SafeMintCall__Outputs {
  _call: SafeMintCall;

  constructor(call: SafeMintCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UpdateCutoffDateCall extends ethereum.Call {
  get inputs(): UpdateCutoffDateCall__Inputs {
    return new UpdateCutoffDateCall__Inputs(this);
  }

  get outputs(): UpdateCutoffDateCall__Outputs {
    return new UpdateCutoffDateCall__Outputs(this);
  }
}

export class UpdateCutoffDateCall__Inputs {
  _call: UpdateCutoffDateCall;

  constructor(call: UpdateCutoffDateCall) {
    this._call = call;
  }
}

export class UpdateCutoffDateCall__Outputs {
  _call: UpdateCutoffDateCall;

  constructor(call: UpdateCutoffDateCall) {
    this._call = call;
  }
}
