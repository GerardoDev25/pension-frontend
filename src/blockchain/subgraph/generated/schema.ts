// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class DataPension extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DataPension entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DataPension must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DataPension", id.toString(), this);
    }
  }

  static load(id: string): DataPension | null {
    return changetype<DataPension | null>(store.get("DataPension", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get biologySex(): string {
    let value = this.get("biologySex");
    return value!.toString();
  }

  set biologySex(value: string) {
    this.set("biologySex", Value.fromString(value));
  }

  get age(): BigInt {
    let value = this.get("age");
    return value!.toBigInt();
  }

  set age(value: BigInt) {
    this.set("age", Value.fromBigInt(value));
  }

  get bornAge(): BigInt {
    let value = this.get("bornAge");
    return value!.toBigInt();
  }

  set bornAge(value: BigInt) {
    this.set("bornAge", Value.fromBigInt(value));
  }

  get retirentmentData(): BigInt {
    let value = this.get("retirentmentData");
    return value!.toBigInt();
  }

  set retirentmentData(value: BigInt) {
    this.set("retirentmentData", Value.fromBigInt(value));
  }

  get pensionCreatedTime(): BigInt {
    let value = this.get("pensionCreatedTime");
    return value!.toBigInt();
  }

  set pensionCreatedTime(value: BigInt) {
    this.set("pensionCreatedTime", Value.fromBigInt(value));
  }

  get contributorQuotes(): Array<string> {
    let value = this.get("contributorQuotes");
    return value!.toStringArray();
  }

  set contributorQuotes(value: Array<string>) {
    this.set("contributorQuotes", Value.fromStringArray(value));
  }
}

export class ContributorQuote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ContributorQuote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ContributorQuote must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ContributorQuote", id.toString(), this);
    }
  }

  static load(id: string): ContributorQuote | null {
    return changetype<ContributorQuote | null>(
      store.get("ContributorQuote", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get pension(): string {
    let value = this.get("pension");
    return value!.toString();
  }

  set pension(value: string) {
    this.set("pension", Value.fromString(value));
  }

  get contributionDate(): BigInt {
    let value = this.get("contributionDate");
    return value!.toBigInt();
  }

  set contributionDate(value: BigInt) {
    this.set("contributionDate", Value.fromBigInt(value));
  }

  get savingAmount(): BigInt {
    let value = this.get("savingAmount");
    return value!.toBigInt();
  }

  set savingAmount(value: BigInt) {
    this.set("savingAmount", Value.fromBigInt(value));
  }

  get solidaryAmount(): BigInt {
    let value = this.get("solidaryAmount");
    return value!.toBigInt();
  }

  set solidaryAmount(value: BigInt) {
    this.set("solidaryAmount", Value.fromBigInt(value));
  }

  get totalAmount(): BigInt {
    let value = this.get("totalAmount");
    return value!.toBigInt();
  }

  set totalAmount(value: BigInt) {
    this.set("totalAmount", Value.fromBigInt(value));
  }
}

export class RetairedQuote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RetairedQuote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RetairedQuote must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RetairedQuote", id.toString(), this);
    }
  }

  static load(id: string): RetairedQuote | null {
    return changetype<RetairedQuote | null>(store.get("RetairedQuote", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get monthlyQuote(): BigInt {
    let value = this.get("monthlyQuote");
    return value!.toBigInt();
  }

  set monthlyQuote(value: BigInt) {
    this.set("monthlyQuote", Value.fromBigInt(value));
  }

  get quantityQuote(): BigInt {
    let value = this.get("quantityQuote");
    return value!.toBigInt();
  }

  set quantityQuote(value: BigInt) {
    this.set("quantityQuote", Value.fromBigInt(value));
  }

  get totalPaidQuotes(): BigInt {
    let value = this.get("totalPaidQuotes");
    return value!.toBigInt();
  }

  set totalPaidQuotes(value: BigInt) {
    this.set("totalPaidQuotes", Value.fromBigInt(value));
  }

  get totalPensionValue(): BigInt {
    let value = this.get("totalPensionValue");
    return value!.toBigInt();
  }

  set totalPensionValue(value: BigInt) {
    this.set("totalPensionValue", Value.fromBigInt(value));
  }
}

export class GeneralBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GeneralBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GeneralBalance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GeneralBalance", id.toString(), this);
    }
  }

  static load(id: string): GeneralBalance | null {
    return changetype<GeneralBalance | null>(store.get("GeneralBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get solvent(): BigInt {
    let value = this.get("solvent");
    return value!.toBigInt();
  }

  set solvent(value: BigInt) {
    this.set("solvent", Value.fromBigInt(value));
  }

  get totalAmount(): BigInt {
    let value = this.get("totalAmount");
    return value!.toBigInt();
  }

  set totalAmount(value: BigInt) {
    this.set("totalAmount", Value.fromBigInt(value));
  }

  get totalToPay(): BigInt {
    let value = this.get("totalToPay");
    return value!.toBigInt();
  }

  set totalToPay(value: BigInt) {
    this.set("totalToPay", Value.fromBigInt(value));
  }

  get retairedRecords(): Array<string> | null {
    let value = this.get("retairedRecords");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set retairedRecords(value: Array<string> | null) {
    if (!value) {
      this.unset("retairedRecords");
    } else {
      this.set("retairedRecords", Value.fromStringArray(<Array<string>>value));
    }
  }

  get quoteRecords(): Array<string> | null {
    let value = this.get("quoteRecords");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set quoteRecords(value: Array<string> | null) {
    if (!value) {
      this.unset("quoteRecords");
    } else {
      this.set("quoteRecords", Value.fromStringArray(<Array<string>>value));
    }
  }
}
